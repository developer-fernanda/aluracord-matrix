import React from 'react';
import PropTypes from 'prop-types';
export interface RipplesProps {
    during?: number;
    color?: string;
    onClick?: (ev: React.MouseEvent<HTMLDivElement>) => any;
    className?: string;
}
export declare const createRipples: (defaultProps?: Partial<RipplesProps>) => {
    new (props: RipplesProps): {
        timer: number;
        componentWillUnmount(): void;
        onClick: (ev: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
        render(): JSX.Element;
        context: any;
        setState<K extends "rippleStyle">(state: Readonly<{
            rippleStyle: React.CSSProperties;
        }> | ((prevState: Readonly<Readonly<{
            rippleStyle: React.CSSProperties;
        }>>, props: Readonly<RipplesProps>) => Readonly<{
            rippleStyle: React.CSSProperties;
        }> | Pick<Readonly<{
            rippleStyle: React.CSSProperties;
        }>, K> | null) | Pick<Readonly<{
            rippleStyle: React.CSSProperties;
        }>, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<RipplesProps> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<Readonly<{
            rippleStyle: React.CSSProperties;
        }>>;
        refs: {
            [key: string]: React.ReactInstance;
        };
    };
    displayName: string;
    propTypes: {
        during: PropTypes.Requireable<number>;
        color: PropTypes.Requireable<string>;
        onClick: PropTypes.Requireable<(...args: any[]) => any>;
        className: PropTypes.Requireable<string>;
    };
    defaultProps: {
        during: number;
        color: string;
        onClick: ((ev: React.MouseEvent<HTMLDivElement, MouseEvent>) => any) | (() => void);
        className: string;
    };
    contextType?: React.Context<any> | undefined;
};
