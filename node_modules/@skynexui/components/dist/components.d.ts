import React, { Ref, ChangeEventHandler, KeyboardEventHandler } from 'react';
import * as iconSet from 'react-icons/fa';

declare enum Breakpoints {
    xs = "xs",
    sm = "sm",
    md = "md",
    lg = "lg",
    xl = "xl"
}

declare type ResponsiveProperty<Type> = Partial<Record<Breakpoints, Type>>;
interface StyleSheet {
    bottom?: ResponsiveProperty<string | number> | string;
    left?: ResponsiveProperty<string | number> | string;
    right?: ResponsiveProperty<string | number> | string;
    top?: ResponsiveProperty<string | number> | string;
    position?: ResponsiveProperty<'relative' | 'absolute'> | string;
    boxShadowColor?: ResponsiveProperty<string> | string;
    boxShadowSpread?: ResponsiveProperty<string | number> | string;
    boxShadowBlur?: ResponsiveProperty<string | number> | string;
    boxShadowOffsetY?: ResponsiveProperty<string | number> | string;
    boxShadowOffsetX?: ResponsiveProperty<string | number> | string;
    borderRadiusBottomRight?: ResponsiveProperty<string> | string;
    borderRadiusBottomLeft?: ResponsiveProperty<string> | string;
    borderRadiusTopRight?: ResponsiveProperty<string> | string;
    borderRadiusTopLeft?: ResponsiveProperty<string> | string;
    borderRadius?: ResponsiveProperty<string> | string;
    overflowY?: ResponsiveProperty<'visible' | 'hidden' | 'scroll'> | string;
    flex?: ResponsiveProperty<number | string> | string | number;
    alignItems?: ResponsiveProperty<'stretch' | 'flex-start' | 'flex-end' | 'center'> | string;
    crossAxisAlignment?: ResponsiveProperty<'stretch' | 'flex-start' | 'flex-end' | 'center'> | string;
    justifyContent?: ResponsiveProperty<'center' | 'flex-start' | 'flex-end' | 'spaceBetween' | 'spaceAround' | 'spaceEvenly'> | string;
    mainAxisAlignment?: ResponsiveProperty<'center' | 'flex-start' | 'flex-end' | 'spaceBetween' | 'spaceAround' | 'spaceEvenly'> | string;
    flexDirection?: ResponsiveProperty<'row' | 'column'> | string;
    marginHorizontal?: ResponsiveProperty<number | string> | string;
    marginVertical?: ResponsiveProperty<number | string> | string;
    marginBottom?: ResponsiveProperty<number | string> | string;
    marginRight?: ResponsiveProperty<number | string> | string;
    marginLeft?: ResponsiveProperty<number | string> | string;
    marginTop?: ResponsiveProperty<number | string> | string;
    margin?: ResponsiveProperty<number | string> | string;
    paddingHorizontal?: ResponsiveProperty<number | string> | string;
    paddingVertical?: ResponsiveProperty<number | string> | string;
    paddingBottom?: ResponsiveProperty<number | string> | string;
    paddingRight?: ResponsiveProperty<number | string> | string;
    paddingLeft?: ResponsiveProperty<number | string> | string;
    paddingTop?: ResponsiveProperty<number | string> | string;
    padding?: ResponsiveProperty<number | string> | string;
    backgroundColor?: ResponsiveProperty<string> | string;
    color?: ResponsiveProperty<string> | string;
    height?: ResponsiveProperty<string | number> | string;
    width?: ResponsiveProperty<string | number> | string;
    srOnly?: boolean;
    borderStyle?: string;
    overflow?: ResponsiveProperty<string> | string;
    resize?: ResponsiveProperty<string> | string;
    textDecoration?: ResponsiveProperty<string> | string;
    transition?: ResponsiveProperty<string> | string;
    fontFamily?: ResponsiveProperty<string> | string;
    fontSize?: ResponsiveProperty<string | number> | string;
    outline?: ResponsiveProperty<string> | string;
    cursor?: ResponsiveProperty<string> | string;
    display?: ResponsiveProperty<string> | string;
    maxWidth?: ResponsiveProperty<string> | string;
    border?: ResponsiveProperty<string> | string;
    borderWidth?: ResponsiveProperty<string> | string;
    borderColor?: ResponsiveProperty<string> | string;
    boxShadow?: ResponsiveProperty<string> | string;
    opacity?: ResponsiveProperty<number | string> | string;
    textAlign?: ResponsiveProperty<string> | string;
    focus?: StyleSheet;
    hover?: StyleSheet;
    disabled?: StyleSheet;
}

interface BoxProps {
    tag?: 'form' | 'div' | 'ul' | 'main' | 'section' | 'article' | 'header' | 'footer' | 'nav';
    /**
     * @deprecated use "tag" attribute instead
    */
    as?: string;
    children: React.ReactNode;
    className?: string;
    styleSheet?: StyleSheet;
    ref: Ref<unknown>;
}
declare const Box: React.ForwardRefExoticComponent<Pick<BoxProps, "as" | "styleSheet" | "children" | "className" | "tag"> & React.RefAttributes<unknown>>;

declare const theme: {
    breakpoints: {
        xl: number;
        lg: number;
        md: number;
        sm: number;
        xs: number;
    };
    colors: {
        warning: {
            x050: string;
            x100: string;
            x200: string;
            x300: string;
            x400: string;
            x500: string;
            x600: string;
            x700: string;
            x800: string;
            x900: string;
        };
        negative: {
            x050: string;
            x100: string;
            x200: string;
            x300: string;
            x400: string;
            x500: string;
            x600: string;
            x700: string;
            x800: string;
            x900: string;
        };
        positive: {
            x050: string;
            x100: string;
            x200: string;
            x300: string;
            x400: string;
            x500: string;
            x600: string;
            x700: string;
            x800: string;
            x900: string;
        };
        neutral: {
            x000: string;
            x050: string;
            x100: string;
            x200: string;
            x300: string;
            x400: string;
            x500: string;
            x600: string;
            x700: string;
            x800: string;
            x900: string;
            x999: string;
        };
        accent: {
            x050: string;
            x100: string;
            x200: string;
            x300: string;
            x400: string;
            x500: string;
            x600: string;
            x700: string;
            x800: string;
            x900: string;
        };
        primary: {
            x050: string;
            x100: string;
            x200: string;
            x300: string;
            x400: string;
            x500: string;
            x600: string;
            x700: string;
            x800: string;
            x900: string;
        };
    };
    typography: {
        fontFamily: string;
        variants: {
            display1: {
                fontSize: {
                    xs: string;
                    md: string;
                };
                letterSpacing: {
                    xs: string;
                };
                fontWeight: {
                    xs: string;
                };
            };
            heading1: {
                fontSize: {
                    xs: string;
                    md: string;
                };
                letterSpacing: {
                    xs: string;
                };
                fontWeight: {
                    xs: string;
                };
            };
            heading2: {
                fontSize: {
                    xs: string;
                    md: string;
                };
                letterSpacing: {
                    xs: string;
                };
                fontWeight: {
                    xs: string;
                };
            };
            heading3: {
                fontSize: {
                    xs: string;
                    md: string;
                };
                letterSpacing: {
                    xs: string;
                };
                fontWeight: {
                    xs: string;
                };
            };
            heading4: {
                fontSize: {
                    xs: string;
                    md: string;
                };
                letterSpacing: {
                    xs: string;
                };
                fontWeight: {
                    xs: string;
                };
            };
            heading5: {
                fontSize: {
                    xs: string;
                    md: string;
                };
                letterSpacing: {
                    xs: string;
                };
                fontWeight: {
                    xs: string;
                };
            };
            body1: {
                fontSize: {
                    xs: string;
                };
                fontWeight: {
                    xs: string;
                };
            };
            body2: {
                fontSize: {
                    xs: string;
                };
                fontWeight: {
                    xs: string;
                };
            };
            body3: {
                fontSize: {
                    xs: string;
                };
                fontWeight: {
                    xs: string;
                };
            };
            body4: {
                fontSize: {
                    xs: string;
                };
                fontWeight: {
                    xs: string;
                };
            };
        };
    };
    space: {
        x0: string;
        xpx: string;
        'x0.5': string;
        x1: string;
        'x1.5': string;
        x2: string;
        'x2.5': string;
        x3: string;
        'x3.5': string;
        x4: string;
        x5: string;
        x6: string;
        x7: string;
        x8: string;
        x9: string;
        x10: string;
        x11: string;
        x12: string;
        x14: string;
        x16: string;
        x20: string;
        x24: string;
        x28: string;
        x32: string;
        x36: string;
        x40: string;
        x44: string;
        x48: string;
        x52: string;
        x56: string;
        x60: string;
        x64: string;
        x72: string;
        x80: string;
        x96: string;
        xcontainer_xs: string;
        xcontainer_sm: string;
        xcontainer_md: string;
        xcontainer_lg: string;
        xcontainer_xl: string;
        'x1/1': string;
        'x1/2': string;
        'x1/3': string;
        'x2/3': string;
        'x1/4': string;
        'x2/4': string;
        'x3/4': string;
        'x1/5': string;
        'x2/5': string;
        'x3/5': string;
        'x4/5': string;
        'x1/6': string;
        'x2/6': string;
        'x3/6': string;
        'x4/6': string;
        'x5/6': string;
        'x1/12': string;
        'x2/12': string;
        'x3/12': string;
        'x4/12': string;
        'x5/12': string;
        'x6/12': string;
        'x7/12': string;
        'x8/12': string;
        'x9/12': string;
        'x10/12': string;
        'x11/12': string;
    };
    components: {
        textField: {
            variant: string;
        };
    };
};
declare type Theme = typeof theme;

declare const useTheme: () => {
    breakpoints: {
        xl: number;
        lg: number;
        md: number;
        sm: number;
        xs: number;
    };
    colors: {
        warning: {
            x050: string;
            x100: string;
            x200: string;
            x300: string;
            x400: string;
            x500: string;
            x600: string;
            x700: string;
            x800: string;
            x900: string;
        };
        negative: {
            x050: string;
            x100: string;
            x200: string;
            x300: string;
            x400: string;
            x500: string;
            x600: string;
            x700: string;
            x800: string;
            x900: string;
        };
        positive: {
            x050: string;
            x100: string;
            x200: string;
            x300: string;
            x400: string;
            x500: string;
            x600: string;
            x700: string;
            x800: string;
            x900: string;
        };
        neutral: {
            x000: string;
            x050: string;
            x100: string;
            x200: string;
            x300: string;
            x400: string;
            x500: string;
            x600: string;
            x700: string;
            x800: string;
            x900: string;
            x999: string;
        };
        accent: {
            x050: string;
            x100: string;
            x200: string;
            x300: string;
            x400: string;
            x500: string;
            x600: string;
            x700: string;
            x800: string;
            x900: string;
        };
        primary: {
            x050: string;
            x100: string;
            x200: string;
            x300: string;
            x400: string;
            x500: string;
            x600: string;
            x700: string;
            x800: string;
            x900: string;
        };
    };
    typography: {
        fontFamily: string;
        variants: {
            display1: {
                fontSize: {
                    xs: string;
                    md: string;
                };
                letterSpacing: {
                    xs: string;
                };
                fontWeight: {
                    xs: string;
                };
            };
            heading1: {
                fontSize: {
                    xs: string;
                    md: string;
                };
                letterSpacing: {
                    xs: string;
                };
                fontWeight: {
                    xs: string;
                };
            };
            heading2: {
                fontSize: {
                    xs: string;
                    md: string;
                };
                letterSpacing: {
                    xs: string;
                };
                fontWeight: {
                    xs: string;
                };
            };
            heading3: {
                fontSize: {
                    xs: string;
                    md: string;
                };
                letterSpacing: {
                    xs: string;
                };
                fontWeight: {
                    xs: string;
                };
            };
            heading4: {
                fontSize: {
                    xs: string;
                    md: string;
                };
                letterSpacing: {
                    xs: string;
                };
                fontWeight: {
                    xs: string;
                };
            };
            heading5: {
                fontSize: {
                    xs: string;
                    md: string;
                };
                letterSpacing: {
                    xs: string;
                };
                fontWeight: {
                    xs: string;
                };
            };
            body1: {
                fontSize: {
                    xs: string;
                };
                fontWeight: {
                    xs: string;
                };
            };
            body2: {
                fontSize: {
                    xs: string;
                };
                fontWeight: {
                    xs: string;
                };
            };
            body3: {
                fontSize: {
                    xs: string;
                };
                fontWeight: {
                    xs: string;
                };
            };
            body4: {
                fontSize: {
                    xs: string;
                };
                fontWeight: {
                    xs: string;
                };
            };
        };
    };
    space: {
        x0: string;
        xpx: string;
        'x0.5': string;
        x1: string;
        'x1.5': string;
        x2: string;
        'x2.5': string;
        x3: string;
        'x3.5': string;
        x4: string;
        x5: string;
        x6: string;
        x7: string;
        x8: string;
        x9: string;
        x10: string;
        x11: string;
        x12: string;
        x14: string;
        x16: string;
        x20: string;
        x24: string;
        x28: string;
        x32: string;
        x36: string;
        x40: string;
        x44: string;
        x48: string;
        x52: string;
        x56: string;
        x60: string;
        x64: string;
        x72: string;
        x80: string;
        x96: string;
        xcontainer_xs: string;
        xcontainer_sm: string;
        xcontainer_md: string;
        xcontainer_lg: string;
        xcontainer_xl: string;
        'x1/1': string;
        'x1/2': string;
        'x1/3': string;
        'x2/3': string;
        'x1/4': string;
        'x2/4': string;
        'x3/4': string;
        'x1/5': string;
        'x2/5': string;
        'x3/5': string;
        'x4/5': string;
        'x1/6': string;
        'x2/6': string;
        'x3/6': string;
        'x4/6': string;
        'x5/6': string;
        'x1/12': string;
        'x2/12': string;
        'x3/12': string;
        'x4/12': string;
        'x5/12': string;
        'x6/12': string;
        'x7/12': string;
        'x8/12': string;
        'x9/12': string;
        'x10/12': string;
        'x11/12': string;
    };
    components: {
        textField: {
            variant: string;
        };
    };
};
interface ProviderProps {
    theme?: Partial<Theme>;
    children: React.ReactNode;
}
declare function Provider({ theme, children }: ProviderProps): JSX.Element;
declare namespace Provider {
    var defaultProps: {
        theme: {};
    };
}

declare enum Typography {
    display1 = "display1",
    heading1 = "heading1",
    heading2 = "heading2",
    heading3 = "heading3",
    heading4 = "heading4",
    heading5 = "heading5",
    body1 = "body1",
    body2 = "body2",
    body3 = "body3",
    body4 = "body4"
}
declare type TypographyVariants = keyof typeof Typography;

interface TextProps {
    variant?: TypographyVariants;
    tag?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'p' | 'span' | 'li' | 'label' | 'a' | 'strong' | 'label';
    /**
     * @deprecated use "tag" attribute instead
    */
    as?: string;
    htmlFor?: string;
    className?: string;
    children: React.ReactNode;
    styleSheet?: StyleSheet;
}
declare const Text: React.ForwardRefExoticComponent<TextProps & React.RefAttributes<unknown>>;

interface GridDisplayProps<DataListItem> {
    data: DataListItem[];
    crossAxisCount?: ResponsiveProperty<number>;
    tag?: string;
    className?: string;
    itemBuilder(index: number, item: DataListItem): React.ReactNode;
    styleSheet?: StyleSheet;
}
declare function GridDisplay<DataList>({ tag, className, data, itemBuilder, styleSheet, crossAxisCount, ...props }: GridDisplayProps<DataList>): JSX.Element;
declare namespace GridDisplay {
    var defaultProps: {
        tag: string;
        className: string;
        styleSheet: {};
        crossAxisCount: number;
    };
}

interface TextFieldColorSet {
    mainColor?: string;
    mainColorHighlight?: string;
    textColor?: string;
    backgroundColor?: string;
}
interface TextFieldColors {
    neutral: TextFieldColorSet;
    positive: TextFieldColorSet;
    negative: TextFieldColorSet;
}
declare type TextFieldStatus = keyof TextFieldColors;
interface TextFieldStyleProps {
    status: TextFieldStatus;
    textFieldColors: TextFieldColors;
    borderRadius?: string;
    mainColor?: unknown;
    fontSize?: unknown;
    paddingVertical?: unknown;
    paddingHorizontal?: unknown;
    textColor?: unknown;
}
declare const textFieldStyles: {
    basicBordered: ({ status, borderRadius, fontSize, paddingHorizontal, paddingVertical, textFieldColors, }: TextFieldStyleProps) => {
        label: {
            order: string;
            hasLabel: boolean;
            hasPlaceholder: boolean;
            fontWeight: string;
            fontSize: unknown;
            color: string;
            marginBottom: string;
        };
        textField: {
            order: string;
            borderWidth: string;
            backgroundColor: string;
            color: string;
            borderColor: string;
            fontSize: unknown;
            borderRadius: string;
            paddingVertical: unknown;
            paddingHorizontal: unknown;
            hover: {
                borderColor: string;
            };
            focus: {
                borderColor: string;
            };
        };
        validationMessage: {
            fontSize: unknown;
            color: string;
        };
        counter: {
            fontSize: unknown;
            color: string;
        };
    };
    bottomBorder: ({ status, fontSize, paddingVertical, textFieldColors, }: TextFieldStyleProps) => {
        label: {
            hasLabel: boolean;
            hasPlaceholder: boolean;
        };
        textField: {
            order: string;
            borderBottomWidth: string;
            backgroundColor: string;
            color: string;
            borderBottomColor: string;
            fontSize: unknown;
            paddingVertical: unknown;
            hover: {
                borderColor: string;
            };
            focus: {
                borderColor: string;
            };
        };
        validationMessage: {
            fontSize: unknown;
            color: string;
        };
        counter: {
            fontSize: unknown;
            color: string;
        };
    };
};
declare const rounded$1: {
    none: string;
    sm: string;
    md: string;
    full: string;
};
interface TextFieldProps {
    name: string;
    label?: string;
    hasLabel?: boolean;
    placeholder?: string;
    counter?: boolean;
    isValid?: boolean;
    isTouched?: boolean;
    textFieldColors?: TextFieldColors;
    variant?: keyof typeof textFieldStyles;
    rounded?: keyof typeof rounded$1;
    fullWidth?: boolean;
    size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';
    type?: 'textarea' | 'phone' | 'email' | 'password' | 'number' | 'text';
    styleSheet?: StyleSheet;
    maxLength?: number;
    value?: string;
    onChange?: ChangeEventHandler<HTMLInputElement>;
    onKeyPress?: KeyboardEventHandler<HTMLInputElement>;
}
declare function TextField({ name, label, hasLabel, placeholder, variant, maxLength, fullWidth, size, textFieldColors, counter, isValid, isTouched, styleSheet: { width, margin, marginLeft, marginRight, marginBottom, marginTop, marginHorizontal, marginVertical, ...styleSheet }, value, ...props }: TextFieldProps): JSX.Element;
declare namespace TextField {
    var defaultProps: {
        variant: string;
        value: any;
        label: string;
        hasLabel: boolean;
        placeholder: string;
        textFieldColors: {
            neutral: {
                backgroundColor: string;
                mainColor: string;
                mainColorHighlight: string;
                textColor: string;
            };
            positive: {
                backgroundColor: string;
                mainColor: string;
                mainColorHighlight: string;
                textColor: string;
            };
            negative: {
                backgroundColor: string;
                mainColor: string;
                mainColorHighlight: string;
                textColor: string;
            };
        };
        isValid: boolean;
        isTouched: boolean;
        type: string;
        rounded: string;
        size: string;
        fullWidth: boolean;
        styleSheet: {};
        maxLength: any;
        counter: boolean;
        onChange: any;
        onKeyPress: any;
    };
}

interface IconProps {
    size?: string | number;
    name?: keyof typeof iconSet;
    styleSheet?: StyleSheet;
    className?: string;
}
declare function Icon({ name, styleSheet, ...props }: IconProps): JSX.Element;
declare namespace Icon {
    var defaultProps: {
        name: string;
        className: string;
        size: string;
        styleSheet: {
            color: string;
        };
    };
}

interface ButtonColorValues {
    mainColor: string;
    mainColorStrong: string;
    mainColorLight: string;
    contrastColor: string;
}
declare const rounded: {
    none: string;
    sm: string;
    md: string;
    full: string;
};
interface ButtonProps {
    iconName?: string;
    href?: string;
    fullWidth?: boolean;
    variant?: 'primary' | 'secondary' | 'tertiary';
    buttonColors?: ButtonColorValues;
    colorVariant?: 'primary' | 'accent' | 'positive' | 'negative' | 'warning' | 'dark' | 'light';
    rounded?: keyof typeof rounded;
    size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';
    type?: 'button' | 'submit' | 'reset';
    disabled?: boolean;
    styleSheet?: StyleSheet;
    label: string;
    onClick?: React.MouseEventHandler<HTMLButtonElement>;
}
declare function Button({ label, styleSheet, colorVariant, buttonColors, fullWidth, onClick, iconName, type, ...props }: ButtonProps): JSX.Element;
declare namespace Button {
    var defaultProps: {
        iconName: any;
        fullWidth: boolean;
        href: string;
        variant: string;
        colorVariant: string;
        rounded: string;
        size: string;
        type: string;
        buttonColors: any;
        disabled: boolean;
        styleSheet: {
            hover: {};
            focus: {};
            disabled: {};
        };
        onClick: () => void;
    };
}

interface ImageProps {
    src?: string;
    styleSheet?: StyleSheet;
}
declare function Image({ styleSheet, ...props }: ImageProps): JSX.Element;
declare namespace Image {
    var defaultProps: {
        src: string;
        styleSheet: {};
    };
}

declare function ThemeGenerator(): JSX.Element;

export { Box, Button, GridDisplay, Icon, Image, Provider, Text, TextField, ThemeGenerator, useTheme };
